{"version":3,"sources":["en.js","src/app/game/state/actions/SetPlayers.action.ts","src/app/grid/cell/cell.component.ts","src/app/grid/cell/cell.component.html","src/app/pages/home/home.component.ts","src/app/pages/home/home.component.html","src/app/grid/grid.module.ts","src/app/grid/config.ts","src/app/grid/state/index.ts","src/environments/environment.ts","src/app/game/player.ts","src/app/grid/state/actions/index.ts","src/app/grid/state/actions/PlayCoin.action.ts","src/app/game/timer/timer.component.ts","src/app/game/timer/timer.component.html","src/app/game/state/actions/End.action.ts","src/app/grid/grid.component.ts","src/app/grid/grid.component.html","src/app/game/state/actions/NextPlayer.action.ts","src/app/app.component.ts","src/app/app.component.html","src/app/game/state/actions/SetFirstPlayer.action.ts","src/app/game/player-setup/player-setup.component.ts","src/app/game/player-setup/player-setup.component.html","src/app/app.module.ts","src/app/grid/coin/coin.component.ts","src/app/grid/coin/coin.component.html","src/app/pages/pages.module.ts","src/app/game/game.module.ts","src/app/game/services/game.service.ts","src/app/game/game.component.ts","src/app/game/game.component.html","src/app/pages/rules/rules.component.ts","src/app/pages/rules/rules.component.html","src/app/grid/state/actions/Reset.action.ts","src/app/game/state/actions/Clear.action.ts","src/app/grid/state/actions/HighlightCells.action.ts","src/app/game/state/actions/Won.action.ts","src/app/game/state/index.ts","src/app/game/services/ai.service.ts","src/app/app-routing.module.ts","src/app/material.module.ts","src/app/game/state/actions/index.ts","src/main.ts","$_lazy_route_resource lazy namespace object","src/app/game/state/actions/Start.action.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["\"use strict\";(function(global){global.ng=global.ng||{};global.ng.common=global.ng.common||{};global.ng.common.locales=global.ng.common.locales||{};const u=undefined;function plural(n){let i=Math.floor(Math.abs(n)),v=n.toString().replace(/^[^.]*\\.?/,\"\").length;if(i===1&&v===0)return 1;return 5}global.ng.common.locales[\"en\"]=[\"en\",[[\"a\",\"p\"],[\"AM\",\"PM\"],u],[[\"AM\",\"PM\"],u,u],[[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]],u,[[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]],u,[[\"B\",\"A\"],[\"BC\",\"AD\"],[\"Before Christ\",\"Anno Domini\"]],0,[6,0],[\"M/d/yy\",\"MMM d, y\",\"MMMM d, y\",\"EEEE, MMMM d, y\"],[\"h:mm a\",\"h:mm:ss a\",\"h:mm:ss a z\",\"h:mm:ss a zzzz\"],[\"{1}, {0}\",u,\"{1} 'at' {0}\",u],[\".\",\",\",\";\",\"%\",\"+\",\"-\",\"E\",\"\\xD7\",\"\\u2030\",\"\\u221E\",\"NaN\",\":\"],[\"#,##0.###\",\"#,##0%\",\"\\xA4#,##0.00\",\"#E0\"],\"USD\",\"$\",\"US Dollar\",{},\"ltr\",plural,[[[\"mi\",\"n\",\"in the morning\",\"in the afternoon\",\"in the evening\",\"at night\"],[\"midnight\",\"noon\",\"in the morning\",\"in the afternoon\",\"in the evening\",\"at night\"],u],[[\"midnight\",\"noon\",\"morning\",\"afternoon\",\"evening\",\"night\"],u,u],[\"00:00\",\"12:00\",[\"06:00\",\"12:00\"],[\"12:00\",\"18:00\"],[\"18:00\",\"21:00\"],[\"21:00\",\"06:00\"]]]]})(typeof globalThis!==\"undefined\"&&globalThis||typeof global!==\"undefined\"&&global||typeof window!==\"undefined\"&&window);","import { Player } from '../../player';\n\nexport class SetPlayers {\n  static readonly type = '[Game] Set player';\n  constructor(public player1: Player, public player2: Player) {}\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Observable, zip } from 'rxjs';\nimport { GameService } from 'src/app/game/services/game.service';\nimport { GridCoord } from '../grid-coords';\nimport { GRID_ROWS } from '../config';\n\n@Component({\n  selector: 'app-cell',\n  templateUrl: './cell.component.html',\n  styleUrls: ['./cell.component.scss'],\n})\nexport class CellComponent implements OnInit {\n  @Input() row: number;\n  @Input() col: number;\n  @Input() isVeiled: boolean;\n\n  cellContent$: Observable<string>;\n  isHighlighted$: Observable<boolean>;\n  isDimmed$: Observable<boolean>;\n\n  /**\n   * The height from which the coin will fall expressed in numbers of rows.\n   */\n  fallHeight: number;\n\n  constructor(private store: Store, private game: GameService) {}\n\n  ngOnInit(): void {\n    // select this cell in grid store\n    this.cellContent$ = this.store.select(\n      (state) => state.grid.cols[this.col][this.row] || ''\n    );\n\n    // detect if this cell is dimmed\n    this.isDimmed$ = this.store.select((state) => {\n      // no cells are highlighted / dimmed\n      if (!state.grid.highlights?.length) {\n        return false;\n      }\n\n      // is dimmed if not amongs highlighted cells\n      return !state.grid.highlights.some(\n        (highlight: GridCoord) =>\n          highlight.col === this.col && highlight.row === this.row\n      );\n    });\n\n    // calc fall height\n    this.fallHeight = GRID_ROWS - this.row;\n  }\n\n  /**\n   * Play a coin in this cell's column\n   */\n  playCoin(): void {\n    this.game.play(this.col);\n  }\n}\n","<div [class]=\"'cell ' + ((isDimmed$ | async) ? 'cell--dimmed ' : ' ') + ((isHighlighted$ | async) ? 'cell--highlighted' : '')\"\n     (click)=\"playCoin()\">\n\n    <!-- Content -->\n    <div [class]=\"'cell__content ' + (!(cellContent$ | async) ? 'cell__content--hidden' : '')\">\n\n        <app-coin class=\"cell__content__coin \"\n                  [color]=\"(cellContent$ | async)\"\n                  [style.marginTop]=\"(cellContent$ | async) ? '' : -130 * fallHeight + '%'\">\n        </app-coin>\n\n    </div>\n\n    <!-- Outline -->\n    <svg version=\"1.1\"\n         [class]=\"'cell__outline ' + (isVeiled ? 'cell__outline--hidden' : '')\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n         x=\"0px\"\n         y=\"0px\"\n         viewBox=\"0 0 100 100\"\n         style=\"enable-background:new 0 0 100 100;\"\n         xml:space=\"preserve\">\n\n        <circle cx=\"50\"\n                cy=\"50\"\n                r=\"49\"\n                stroke=\"currentColor\"\n                fill=\"transparent\" />\n\n    </svg>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"home\">\n    <div class=\"home__title\">\n        <h1 class=\"mat-display-4\">\n            ng<sup>4</sup>\n        </h1>\n        <div class=\"mat-headline\"\n             i18n>\n            Connect 4 game made with Angular\n        </div>\n    </div>\n\n    <a mat-flat-button\n       class=\"home__play-button\"\n       color=\"primary\"\n       routerLink=\"game\"\n       i18n>\n        Play\n    </a>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from './grid.component';\nimport { CellComponent } from './cell/cell.component';\nimport { NgxsModule } from '@ngxs/store';\nimport { GridState } from './state';\nimport { MaterialModule } from '../material.module';\nimport { CoinComponent } from './coin/coin.component';\n\n@NgModule({\n  declarations: [GridComponent, CellComponent, CoinComponent],\n  imports: [CommonModule, MaterialModule, NgxsModule.forFeature([GridState])],\n  exports: [GridComponent, CoinComponent],\n})\nexport class GridModule {}\n","export const GRID_ROWS = 6;\nexport const GRID_COLS = 7;\n","import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext, Store } from '@ngxs/store';\nimport { GridCoord } from '../grid-coords';\nimport { GRID_COLS, GRID_ROWS } from '../config';\nimport { Reset, PlayCoin, HighlightCells } from './actions';\n\nexport interface GridStateModel {\n  cols: string[][];\n  highlights: GridCoord[];\n}\n\n@State<GridStateModel>({\n  name: 'grid',\n  defaults: {\n    cols: [],\n    highlights: [],\n  },\n})\n@Injectable()\nexport class GridState {\n  /**\n   * Returns `true` if all cells are filled.\n   */\n  @Selector()\n  static isFull(state: GridStateModel): boolean {\n    return state.cols.every((col) => col.length === GRID_ROWS);\n  }\n\n  /**\n   * Marks the game as _not_ over.\n   */\n  @Action(Reset)\n  resetGrid(ctx: StateContext<GridStateModel>): void {\n    // generate empty cols\n    const cols = [...Array(GRID_COLS).keys()].map(() => []);\n    ctx.patchState({ cols, highlights: [] });\n  }\n\n  /**\n   * Plays a coin in a specified column for specified player.\n   */\n  @Action(PlayCoin)\n  playCoin(ctx: StateContext<GridStateModel>, action: PlayCoin): void {\n    // copy cols state\n    const state = ctx.getState();\n    const cols = [...state.cols];\n\n    // add the coin to targeted column\n    cols[action.col].push(action.ownerId);\n\n    // update state\n    ctx.patchState({ cols });\n  }\n\n  /**\n   * Set cells to be highlighted.\n   */\n  @Action(HighlightCells)\n  highlightCells(\n    ctx: StateContext<GridStateModel>,\n    action: HighlightCells\n  ): void {\n    ctx.patchState({ highlights: action.cells });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","export class Player {\n  constructor(\n    public color: string,\n    public name: string,\n    public isAi: boolean = false\n  ) {}\n}\n","export { PlayCoin } from './PlayCoin.action';\nexport { Reset } from './Reset.action';\nexport { HighlightCells } from './HighlightCells.action';\n","export class PlayCoin {\n  static readonly type = '[Grid] Play coin';\n  constructor(public ownerId: string, public col: number) {}\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-timer',\n  templateUrl: './timer.component.html',\n  styleUrls: ['./timer.component.scss'],\n})\nexport class TimerComponent implements OnInit, OnDestroy {\n  @Input() isRunning: boolean;\n  @Input() offset: number;\n\n  elapsedSeconds: number;\n  private tickerInverval: number;\n\n  constructor() {}\n\n  /**\n   * Initialize elapsed time and starts the ticker interval.\n   */\n  ngOnInit(): void {\n    this.elapsedSeconds = isNaN(this.offset) ? 0 : this.offset;\n    this.tickerInverval = window.setInterval(() => {\n      if (this.isRunning) {\n        this.elapsedSeconds++;\n      }\n    }, 1000);\n  }\n\n  /**\n   * Clears the ticker interval.\n   */\n  ngOnDestroy(): void {\n    window.clearInterval(this.tickerInverval);\n  }\n\n  /**\n   * Returns the minutes part of `this.elapsedSeconds`.\n   */\n  getFormattedElapsedMinutes(): string {\n    return Math.floor(this.elapsedSeconds / 60).toString();\n  }\n\n  /**\n   * Returns the seconds part of `this.elapsedSeconds`. Returns the value as a\n   * 2 digits string. Eg: `\"01\"`, `\"07\"`, `\"22\"`\n   */\n  getFormattedElapsedSeconds(): string {\n    return (this.elapsedSeconds % 60).toString().padStart(2, '0');\n  }\n}\n","<div class=\"timer\">\n    <span class=\"timer__minutes\">{{getFormattedElapsedMinutes()}}</span>\n    :\n    <span class=\"timer__seconds\">{{getFormattedElapsedSeconds()}}</span>\n</div>","export class End {\n  static readonly type = '[Game] Game over';\n  constructor() {}\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { GRID_COLS, GRID_ROWS } from './config';\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n})\nexport class GridComponent implements OnInit {\n  @Input() isVeiled: boolean;\n\n  rows = [];\n  cols = [];\n  hoveredCol?: number;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.rows = [...Array(GRID_ROWS).keys()].reverse();\n    this.cols = [...Array(GRID_COLS).keys()];\n  }\n\n  /**\n   * Set `hoveredCol` to given `col`.\n   */\n  setHoverCol(col: number): void {\n    this.hoveredCol = col;\n  }\n\n  /**\n   * Clears the value of `hoveredCol`.\n   */\n  clearHoverCol(): void {\n    this.hoveredCol = undefined;\n  }\n}\n","<div class=\"grid\">\n\n    <!-- Cells -->\n    <div class=\"grid__row\"\n         *ngFor=\"let iRow of rows\">\n\n        <app-cell *ngFor=\"let iCol of cols\"\n                  [row]=\"iRow\"\n                  [col]=\"iCol\"\n                  [class]=\"'grid__row__cell ' + (hoveredCol === iCol ? 'grid__row__cell--hover' : '')\"\n                  [isVeiled]=\"isVeiled\"\n                  (mouseover)=\"setHoverCol(iCol)\"\n                  (mouseout)=\"clearHoverCol()\"\n                  (click)=\"clearHoverCol()\">\n        </app-cell>\n\n    </div>\n\n    <!-- Outline -->\n    <svg version=\"1.1\"\n         [class]=\"'grid__outline ' + (isVeiled ? 'grid__outline--hidden' : '')\"\n         xmlns=\"http://www.w3.org/2000/svg\"\n         xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n         x=\"0px\"\n         y=\"0px\"\n         viewBox=\"0 0 280 240\"\n         style=\"enable-background:new 0 0 280 240;\"\n         xml:space=\"preserve\">\n\n        <rect x=\"0\"\n              y=\"0\"\n              width=\"280\"\n              height=\"240\"\n              stroke=\"currentColor\"\n              fill=\"transparent\" />\n\n    </svg>\n\n</div>","export class NextPlayer {\n  static readonly type = '[Game] Next player turn';\n  constructor() {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, RouterEvent } from '@angular/router';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { GameService } from './game/services/game.service';\nimport { GameState } from './game/state';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  isHome$: Observable<boolean>;\n  isGameStarted$: Observable<boolean>;\n  otherTheme: string;\n\n  constructor(\n    private router: Router,\n    private game: GameService,\n    private store: Store\n  ) {}\n\n  ngOnInit(): void {\n    // register observables\n    this.isHome$ = this.router.events\n      .pipe(\n        filter((e: RouterEvent): e is RouterEvent => e instanceof RouterEvent)\n      )\n      .pipe(map((e: any) => e.urlAfterRedirects === '/'));\n    this.isGameStarted$ = this.store.select(GameState.isStarted);\n\n    // set initial theme\n    const isDarkModePrefered =\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches;\n    this.setTheme(isDarkModePrefered ? 'dark' : 'light');\n  }\n\n  /**\n   * Clear the current game.\n   */\n  abandonGame(): void {\n    this.game.clear();\n  }\n\n  /**\n   * Set given `newTheme` as current theme.\n   */\n  setTheme(newTheme: string): void {\n    document.body.classList.remove('dark');\n    document.body.classList.remove('light');\n    document.body.classList.add(newTheme);\n    this.otherTheme = newTheme === 'light' ? 'dark' : 'light';\n  }\n}\n","<!-- App toolbar -->\n<mat-toolbar color=\"primary\"\n             [class]=\"'app__toolbar ' + ((isHome$ | async) ? 'app__toolbar--transparent' : '')\">\n\n    <!-- Menu toggle -->\n    <button mat-icon-button\n            [class]=\"'app__toolbar__menu-toggle ' + ((isHome$ | async) ? 'app__toolbar__menu-toggle--inverted' : '')\"\n            (click)=\"snav.open()\">\n        <mat-icon>menu</mat-icon>\n    </button>\n\n    <!-- App title -->\n    <div class=\"app__toolbar__title\"\n         *ngIf=\"!(isHome$ | async)\"\n         routerLink=\"/\">\n        ng<sup>4</sup>\n    </div>\n\n</mat-toolbar>\n\n<mat-sidenav-container>\n\n    <!-- Side navigation -->\n    <mat-sidenav #snav\n                 class=\"app__sidenav\"\n                 mode=\"over\"\n                 (click)=\"snav.close()\"\n                 fixedInViewport>\n        <mat-nav-list>\n            <div class=\"app__sidenav__logo\">\n                ng<sup>4</sup>\n            </div>\n\n            <a mat-list-item\n               routerLink=\"/\"\n               i18n>Home</a>\n\n            <a mat-list-item\n               routerLink=\"/how-to-play\"\n               i18n>How to play</a>\n\n            <a mat-list-item\n               *ngIf=\"(isGameStarted$ | async)\"\n               (click)=\"abandonGame()\"\n               routerLink=\"/\"\n               i18n>Abandon game</a>\n\n            <mat-divider></mat-divider>\n\n            <a mat-list-item\n               (click)=\"setTheme(otherTheme)\"\n               i18n>{{otherTheme | titlecase}} mode</a>\n\n            <a mat-list-item\n               i18n>Close menu</a>\n        </mat-nav-list>\n\n        <div class=\"app__sidenav__lang-menu\">\n            <button mat-button>En</button>\n            <button mat-button>Fr</button>\n        </div>\n\n    </mat-sidenav>\n\n    <!-- Page content -->\n    <mat-sidenav-content class=\"app__content\">\n\n        <router-outlet></router-outlet>\n\n    </mat-sidenav-content>\n</mat-sidenav-container>","import { Player } from '../../player';\n\nexport class SetFirstPlayer {\n  static readonly type = '[Game] Set first player';\n  constructor(public player: Player) {}\n}\n","import { Component, OnInit, Output } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { Player } from '../player';\nimport { GameService } from '../services/game.service';\nimport { GameState } from '../state';\n\n@Component({\n  selector: 'app-player-setup',\n  templateUrl: './player-setup.component.html',\n  styleUrls: ['./player-setup.component.scss'],\n})\nexport class PlayerSetupComponent implements OnInit {\n  firstPlayer$: Observable<Player>;\n  isAnnouncementReady = false;\n  isPlayingAgainstAi = true;\n\n  private announcementDuration = 1600;\n\n  // default input values\n  player1Name = 'Batman';\n  player2Name = 'Superman';\n\n  constructor(private store: Store, private game: GameService) {}\n\n  ngOnInit(): void {\n    this.firstPlayer$ = this.store.select(GameState.firstPlayer);\n  }\n\n  /**\n   * Starts the game with player names as entered by the user.\n   */\n  onStartGame(): void {\n    // set players\n    this.game.setup(\n      new Player('player-1', this.player1Name),\n      new Player('player-2', this.player2Name, this.isPlayingAgainstAi)\n    );\n\n    // hide announcement animation\n    setTimeout(() => {\n      this.isAnnouncementReady = true;\n    }, this.announcementDuration * 0.6);\n\n    // starts the game after quick wait to display starting player\n    setTimeout(() => this.game.start(), 1.6 * this.announcementDuration);\n  }\n}\n","<div class=\"player-setup\">\n    <div *ngIf=\"!(firstPlayer$ | async)\">\n\n        <h2 class=\"player-setup__title mat-display-1\"\n            i18n>\n            Enter players name\n        </h2>\n\n        <!-- Player 1 -->\n        <mat-form-field appearance=\"standard\">\n            <mat-label>Player 1</mat-label>\n            <input matInput\n                   class=\"player-setup__player-name-input\"\n                   name=\"player1Name\"\n                   [(ngModel)]=\"player1Name\">\n            <app-coin matSuffix\n                      class=\"player-setup__player-name-input__suffix\"\n                      color=\"player-1\"></app-coin>\n\n        </mat-form-field>\n\n        <!-- Player 2 -->\n        <mat-form-field appearance=\"standard\">\n            <mat-label>Player 2</mat-label>\n            <input matInput\n                   class=\"player-setup__player-name-input\"\n                   name=\"player2Name\"\n                   [color]=\"primary\"\n                   [(ngModel)]=\"player2Name\">\n            <app-coin matSuffix\n                      class=\"player-setup__player-name-input__suffix\"\n                      color=\"player-2\"></app-coin>\n        </mat-form-field>\n        <mat-checkbox [(ngModel)]=\"isPlayingAgainstAi\"\n                      name=\"player2Ai\"\n                      i18n>Player 2 is computer</mat-checkbox>\n\n        <!-- Start button -->\n        <div>\n            <button mat-flat-button\n                    class=\"player-setup__finish-button\"\n                    color=\"primary\"\n                    (click)=\"onStartGame()\"\n                    i18n>\n                Start Game\n            </button>\n        </div>\n    </div>\n\n    <!-- Game starting announcement -->\n    <div *ngIf=\"firstPlayer$ | async\"\n         class=\"player-setup__announcement\">\n\n        <!-- Spinning coin -->\n        <ng-container *ngIf=\"!isAnnouncementReady\">\n\n            <app-coin\n                      class=\"player-setup__announcement__coin player-setup__announcement__coin--spinning\">\n            </app-coin>\n\n        </ng-container>\n\n        <!-- Starting player announcement -->\n        <ng-container *ngIf=\"isAnnouncementReady\">\n\n            <app-coin [color]=\"(firstPlayer$ | async).color\"\n                      class=\"player-setup__announcement__coin\">\n            </app-coin>\n\n            <div class=\"player-setup__announcement__message mat-display-1\">\n                {{(firstPlayer$ | async).name}}\n                <span i18n>starts!</span>\n            </div>\n\n        </ng-container>\n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { GameModule } from './game/game.module';\nimport { PagesModule } from './pages/pages.module';\nimport { MaterialModule } from './material.module';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    NgxsModule.forRoot([]),\n    GameModule,\n    PagesModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-coin',\n  templateUrl: './coin.component.html',\n  styleUrls: ['./coin.component.scss'],\n})\nexport class CoinComponent {\n  @Input() color: string;\n\n  constructor() {}\n\n  /**\n   * Returns the css class for coin color.\n   */\n  coinColor(): string {\n    return this.color ? `coin--${this.color}` : '';\n  }\n}\n","<svg version=\"1.1\"\n     [class]=\"'coin ' + coinColor()\"\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     x=\"0px\"\n     y=\"0px\"\n     viewBox=\"0 0 100 100\"\n     style=\"enable-background:new 0 0 100 100;\"\n     xml:space=\"preserve\">\n\n    <circle cx=\"50\"\n            cy=\"50\"\n            r=\"50\"\n            fill=\"currentColor\" />\n    <circle cx=\"50\"\n            cy=\"50\"\n            r=\"40\"\n            fill=\"#fff\"\n            fill-opacity=\"0.4\" />\n\n</svg>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../material.module';\nimport { HomeComponent } from './home/home.component';\nimport { RouterModule } from '@angular/router';\nimport { RulesComponent } from './rules/rules.component';\n\n@NgModule({\n  declarations: [HomeComponent, RulesComponent],\n  imports: [CommonModule, MaterialModule, RouterModule],\n})\nexport class PagesModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GameComponent } from './game.component';\nimport { TimerComponent } from './timer/timer.component';\nimport { PlayerSetupComponent } from './player-setup/player-setup.component';\nimport { NgxsModule } from '@ngxs/store';\nimport { GameState } from './state';\nimport { FormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { GridModule } from '../grid/grid.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [GameComponent, TimerComponent, PlayerSetupComponent],\n  imports: [\n    CommonModule,\n    GridModule,\n    FormsModule,\n    MaterialModule,\n    RouterModule,\n    NgxsModule.forFeature([GameState]),\n  ],\n})\nexport class GameModule {}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport * as Grid from '../../grid/state/actions';\nimport * as Game from '../state/actions';\nimport { GameState } from '../state';\nimport { Player } from '../player';\nimport { GridState } from '../../grid/state';\nimport { GridCoord } from '../../grid/grid-coords';\nimport { GRID_COLS, GRID_ROWS } from '../../grid/config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameService {\n  constructor(private store: Store) {}\n\n  /**\n   * Initilaize the game's players.\n   */\n  setup(player1: Player, player2: Player): void {\n    const firstPlayer = Math.random() > 0.5 ? player1 : player2;\n    this.store.dispatch(new Game.SetPlayers(player1, player2));\n    this.store.dispatch(new Game.SetFirstPlayer(firstPlayer));\n  }\n\n  /**\n   * Starts the game :)\n   */\n  start(): void {\n    // reset the grid and starts the game\n    this.store.dispatch(new Grid.Reset());\n    this.store.dispatch(new Game.Start());\n  }\n\n  /**\n   * Clears the game.\n   */\n  clear(): void {\n    this.store.dispatch(new Game.Clear());\n  }\n\n  /**\n   * Play a coin for active player in given `col` and\n   */\n  play(col: number): void {\n    // make sure the game has started\n    if (!this.store.selectSnapshot(GameState.isStarted)) {\n      throw new Error(\n        '[Game Service] The game has not started, play() is not allowed.'\n      );\n    }\n\n    // make sure targeted colum is not full\n    const gridCols: string[][] = this.store.selectSnapshot(\n      (state) => state.grid.cols\n    );\n    if (gridCols[col].length >= GRID_ROWS) {\n      return;\n    }\n\n    // play coin for active player\n    const activePlayer = this.store.selectSnapshot(GameState.activePlayer);\n    this.store.dispatch(new Grid.PlayCoin(activePlayer.color, col));\n\n    // get play values\n    const row = gridCols[col].length - 1;\n    const value = gridCols[col][row];\n\n    // get connected cells\n    const cells = this.getConnectedCells({ col, row }, value);\n\n    // check if game is won\n    if (cells) {\n      this.store.dispatch(new Grid.HighlightCells(cells));\n      this.store.dispatch(new Game.Won(activePlayer));\n      return;\n    }\n\n    // check if game is over\n    if (this.store.selectSnapshot(GridState.isFull)) {\n      this.store.dispatch(new Game.End());\n      return;\n    }\n\n    // start next player's turn\n    this.store.dispatch(new Game.NextPlayer());\n  }\n\n  /**\n   * Look in 4 directions (horizontal, vertical, backward diagonal and\n   * forward diagonal) around given `pivot` for cells that have the same value\n   * as given `value`. Returns the cells coordinates if 4 connected ones are\n   * found, `null` otherwise.\n   */\n  private getConnectedCells(\n    pivot: GridCoord,\n    value: string\n  ): GridCoord[] | null {\n    const gridCols: string[][] = this.store.selectSnapshot(\n      (state) => state.grid.cols\n    );\n\n    // define utils\n    const coefs = [-3, -2, -1, 0, 1, 2, 3];\n    const bases = [\n      // vertical\n      { h: 0, v: 1 },\n\n      // horizontal\n      { h: 1, v: 0 },\n\n      // backwardDiag\n      { h: 1, v: -1 },\n\n      // forwardDiag\n      { h: 1, v: 1 },\n    ];\n\n    // check every base\n    let winningCells: GridCoord[];\n    let col: number;\n    let row: number;\n    let cellValue: string;\n    for (const base of bases) {\n      // try to extract 4 consecutive cells\n      winningCells = [];\n      for (const coef of coefs) {\n        col = base.v * coef + pivot.col;\n        row = base.h * coef + pivot.row;\n\n        // skip if out of bounds\n        if (0 > col || col >= GRID_COLS || 0 > row || row >= GRID_ROWS) {\n          continue;\n        }\n\n        // add cell if matching played value\n        cellValue = gridCols[col][row] || '';\n        if (cellValue === value) {\n          winningCells.push({ col, row });\n\n          // we have 4 cells !\n          if (winningCells.length === 4) {\n            return winningCells;\n          }\n        }\n\n        // reset winning cells list\n        else {\n          winningCells = [];\n        }\n      }\n    }\n\n    // if we reach here, no more than 3 connected cells\n    return null;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { Player } from './player';\nimport { AiService } from './services/ai.service';\nimport { GameService } from './services/game.service';\nimport { GameState } from './state';\n\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.scss'],\n})\nexport class GameComponent implements OnInit {\n  isGameStarted$: Observable<boolean>;\n  isGameOver$: Observable<boolean>;\n  activePlayer$: Observable<Player>;\n  winner$: Observable<Player>;\n\n  isGridVeiled: boolean;\n  isGridUnveiled: boolean;\n  timerOffset = 0;\n\n  constructor(\n    private store: Store,\n    private game: GameService,\n    private ai: AiService\n  ) {}\n\n  ngOnInit(): void {\n    this.isGameStarted$ = this.store.select(GameState.isStarted);\n    this.isGameOver$ = this.store.select(GameState.isOver);\n    this.activePlayer$ = this.store.select(GameState.activePlayer);\n    this.winner$ = this.store.select(GameState.winner);\n    this.isGridVeiled = true;\n    this.isGridUnveiled = false;\n\n    // prep IA\n    this.ai.awake();\n\n    // sets timer offset\n    this.store.selectSnapshot((state) => {\n      // no start timestamp in store\n      if (!state.game.startTimestamp) {\n        this.timerOffset = 0;\n        return;\n      }\n\n      // calc offset in seconds\n      const now = new Date().getTime();\n      this.timerOffset = Math.round((now - state.game.startTimestamp) / 1000);\n    });\n\n    // unveil grid upon game starting\n    this.isGameStarted$.subscribe(async (value) => {\n      if (value) {\n        await this.unveilGame();\n        this.isGridUnveiled = true;\n      }\n    });\n  }\n\n  private unveilGame(): Promise<void> {\n    return new Promise((resolve) => {\n      // defer game unveiling to trigger animation\n      window.setTimeout(() => {\n        this.isGridVeiled = false;\n      }, 10);\n\n      // wait for css animation\n      window.setTimeout(resolve, 800);\n    });\n  }\n\n  /**\n   * Resets the game state\n   */\n  onExitGame(): void {\n    this.game.clear();\n  }\n}\n","<div class=\"game\">\n    <!-- Player setup -->\n    <app-player-setup *ngIf=\"!(isGameStarted$ | async)\"></app-player-setup>\n\n    <!-- Game view -->\n    <div *ngIf=\"isGameStarted$ | async\"\n         class=\"game__playing\">\n\n        <!-- Game status -->\n        <header class=\"game__playing__header\">\n            <app-timer [isRunning]=\"isGridUnveiled && !(isGameOver$ | async)\"\n                       [offset]=\"timerOffset\"></app-timer>\n\n            <div class=\"game__playing__status\">\n\n                <!-- Next player -->\n                <span *ngIf=\"!(isGameOver$ | async)\">\n                    <app-coin class=\"game__playing__status__coin\"\n                              [color]=\"(activePlayer$ | async)?.color\"></app-coin>\n                    {{(activePlayer$ | async)?.name}}\n                    <span i18n>'s turn</span>\n                </span>\n\n                <!-- Game is over -->\n                <span *ngIf=\"isGameOver$ | async\"\n                      class=\"mat-display-1\">\n                    <span *ngIf=\"winner$ | async\">\n                        {{(winner$ | async).name}} <span i18n>won!</span>\n                    </span>\n                    <span *ngIf=\"!(winner$ | async)\"\n                          i18n>\n                        Draw!\n                    </span>\n                </span>\n            </div>\n        </header>\n\n        <!-- Game grid -->\n        <app-grid class=\"game__playing__grid\"\n                  [isVeiled]=\"isGridVeiled\"></app-grid>\n\n        <!-- Home button -->\n        <a *ngIf=\"isGameOver$ | async\"\n           mat-flat-button\n           color=\"primary\"\n           class=\"game__playing__exit-button\"\n           routerLink=\"/\"\n           (click)=\"onExitGame()\"\n           i18n>\n            Home\n        </a>\n    </div>\n\n    <!-- Box glow -->\n    <div *ngIf=\"isGridUnveiled\"\n         [class]=\"'game__glow game__glow--' +  (activePlayer$ | async)?.color\"></div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-rules',\n  templateUrl: './rules.component.html',\n  styleUrls: ['./rules.component.scss']\n})\nexport class RulesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"rules\">\n    <h1 class=\"mat-display-1\"\n        i18n>How to play</h1>\n\n    <p i18n>\n        Connect 4 is a two player game where they play coins in turn in a 6 by 7 grid until victory\n        or filling the grid.\n    </p>\n\n    <h2 i18n>Goal</h2>\n    <p i18n>\n        The goal of the game is to connect 4 coins of your color in any direction. If the grid is\n        full, the game is a draw.\n    </p>\n\n    <h2 i18n>Setup</h2>\n    <p i18n>\n        The two players choose a color. One of them is choosed to start the game.\n    </p>\n\n    <h2 i18n>Playing</h2>\n    <p i18n>\n        Coins \"fall\" in the column they're played in. In other words, the grid is fill from the\n        bottom row up. Players play 1 coin during their turn and then wait for the other player to\n        play. Any player can play in any column.\n    </p>\n</div>","export class Reset {\n  static readonly type = '[Grid] Reset';\n  constructor() {}\n}\n","export class Clear {\n  static readonly type = '[Game] Clear game';\n  constructor() {}\n}\n","import { GridCoord } from '../../grid-coords';\nexport class HighlightCells {\n  static readonly type = '[Grid] Highlight cells';\n  constructor(public cells: GridCoord[]) {}\n}\n","import { Player } from '../../player';\n\nexport class Won {\n  static readonly type = '[Game] Game won';\n  constructor(public winner: Player) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { Player } from '../player';\nimport {\n  End,\n  NextPlayer,\n  Start,\n  SetPlayers,\n  Clear,\n  Won,\n  SetFirstPlayer,\n} from './actions';\n\nexport interface GameStateModel {\n  players: Player[];\n  firstPlayer?: Player;\n  activePlayer?: Player;\n  winner?: Player;\n  startTimestamp?: number;\n  isOver: boolean;\n}\n\n@State<GameStateModel>({\n  name: 'game',\n  defaults: {\n    players: [],\n    firstPlayer: undefined,\n    activePlayer: undefined,\n    winner: undefined,\n    startTimestamp: undefined,\n    isOver: true,\n  },\n})\n@Injectable()\nexport class GameState {\n  /**\n   * Returns `true` if the game has a start time.\n   */\n  @Selector()\n  static isStarted(state: GameStateModel): boolean {\n    return !!state.startTimestamp;\n  }\n\n  /**\n   * Returns `true` if the game is over.\n   */\n  @Selector()\n  static isOver(state: GameStateModel): boolean {\n    return state.isOver;\n  }\n\n  /**\n   * Get the player that plays first in the current game.\n   */\n  @Selector()\n  static firstPlayer(state: GameStateModel): Player {\n    return state.firstPlayer;\n  }\n\n  /**\n   * Get the currently active player.\n   */\n  @Selector()\n  static activePlayer(state: GameStateModel): Player {\n    return state.activePlayer;\n  }\n\n  /**\n   * Get the winner player.\n   */\n  @Selector()\n  static winner(state: GameStateModel): Player {\n    return state.winner;\n  }\n\n  /**\n   * Set the players.\n   */\n  @Action(SetPlayers)\n  setPlayers(ctx: StateContext<GameStateModel>, action: SetPlayers): void {\n    ctx.patchState({\n      players: [action.player1, action.player2],\n    });\n  }\n\n  /**\n   * Set the player that will start the game.\n   */\n  @Action(SetFirstPlayer)\n  setFirstPlayer(\n    ctx: StateContext<GameStateModel>,\n    action: SetFirstPlayer\n  ): void {\n    ctx.patchState({ firstPlayer: action.player });\n  }\n\n  /**\n   * Starts the game by setting the start timestamp and initializing\n   * activePlayer.\n   */\n  @Action(Start)\n  startGame(ctx: StateContext<GameStateModel>): void {\n    const state = ctx.getState();\n    ctx.patchState({\n      isOver: false,\n      startTimestamp: new Date().getTime(),\n      activePlayer: state.firstPlayer,\n    });\n  }\n\n  /**\n   * Sets the winner of the game.\n   */\n  @Action(Won)\n  setWinner(ctx: StateContext<GameStateModel>, action: Won): void {\n    ctx.patchState({ winner: action.winner });\n  }\n\n  /**\n   * Marks the game as over.\n   */\n  @Action(End)\n  @Action(Won)\n  endGame(ctx: StateContext<GameStateModel>): void {\n    ctx.patchState({ isOver: true });\n  }\n\n  /**\n   * Resets state.\n   */\n  @Action(Clear)\n  clearGame(ctx: StateContext<GameStateModel>): void {\n    ctx.patchState({\n      players: [],\n      firstPlayer: undefined,\n      winner: undefined,\n      isOver: true,\n      startTimestamp: undefined,\n    });\n  }\n\n  /**\n   * Switch the active player.\n   */\n  @Action(NextPlayer)\n  startNextPlayersTurn(ctx: StateContext<GameStateModel>): void {\n    const state = ctx.getState();\n    const innactivePlayer = state.players.find(\n      (player) => player !== state.activePlayer\n    );\n    ctx.patchState({ activePlayer: innactivePlayer });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { GRID_ROWS } from 'src/app/grid/config';\nimport { Player } from '../player';\nimport { GameState } from '../state';\nimport { GameService } from './game.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AiService {\n  private newTurn$: Observable<Player>;\n  private gameOver$: Observable<boolean>;\n  private subscriptions: Subscription[] = [];\n  private thinkTime = 600;\n  private isAwaken = false;\n\n  constructor(private store: Store, private game: GameService) {\n    this.newTurn$ = this.store.select(GameState.activePlayer);\n    this.gameOver$ = this.store.select(GameState.isOver);\n  }\n\n  /**\n   * Returns `true` if service was awaken already\n   */\n  isAwake(): boolean {\n    return this.isAwaken;\n  }\n\n  /**\n   * Make the AI aware of game starting / stopping.\n   */\n  awake(): void {\n    // do not awake twice\n    if (this.isAwaken) {\n      return;\n    }\n\n    // start / stop with game\n    this.gameOver$.subscribe((isGameOver) => {\n      isGameOver ? this.stop() : this.start();\n    });\n\n    // mark as awake\n    this.isAwaken = true;\n  }\n\n  /**\n   * Subscribe to active player change. When it's AI's turn, play after\n   * thinking for a bit.\n   */\n  start(): void {\n    // subscribe to new turns\n    this.subscriptions.push(\n      this.newTurn$.subscribe((activePlayer) => {\n        // not IA\n        if (!activePlayer?.isAi) {\n          return;\n        }\n\n        // play after thinking for a bit\n        setTimeout(\n          () => this.play(),\n          (Math.random() * 0.5 + 1) * this.thinkTime\n        );\n      })\n    );\n  }\n\n  /**\n   * Play in a randomly choose non-full column.\n   */\n  play(): void {\n    const gridCols: string[][] = this.store.selectSnapshot(\n      (state) => state.grid.cols\n    );\n\n    // pick a non-full column\n    let col: number;\n    do {\n      col = Math.floor(Math.random() * GRID_ROWS);\n    } while (gridCols[col].length >= GRID_ROWS);\n\n    // play in that column\n    this.game.play(col);\n  }\n\n  /**\n   * Unsubscrtibe from activePlayer$.\n   */\n  stop(): void {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { GameComponent } from './game/game.component';\nimport { HomeComponent } from './pages/home/home.component';\nimport { RulesComponent } from './pages/rules/rules.component';\n\nconst routes: Routes = [\n  { path: 'how-to-play', component: RulesComponent },\n  { path: 'game', component: GameComponent },\n  { path: '', component: HomeComponent },\n  { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\n@NgModule({\n  exports: [\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatRippleModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    OverlayModule,\n    PortalModule,\n  ],\n})\nexport class MaterialModule {}\n\n/*  Copyright 2020 Google LLC. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at http://angular.io/license  */\n","export { Clear } from './Clear.action';\nexport { End } from './End.action';\nexport { Start } from './Start.action';\nexport { SetPlayers } from './SetPlayers.action';\nexport { NextPlayer } from './NextPlayer.action';\nexport { Won } from './Won.action';\nexport { SetFirstPlayer } from './SetFirstPlayer.action';\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","export class Start {\n  static readonly type = '[Game] Start the game';\n  constructor() {}\n}\n"],"sourceRoot":"webpack:///"}